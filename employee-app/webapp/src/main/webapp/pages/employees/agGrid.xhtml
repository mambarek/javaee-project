<ui:composition
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
        xmlns:f="http://xmlns.jcp.org/jsf/core"
        xmlns:h="http://xmlns.jcp.org/jsf/html"
        xmlns:jsf="http://xmlns.jcp.org/jsf"
        xmlns:p="http://primefaces.org/ui"
        xmlns:pe="http://xmlns.jcp.org/jsf/composite/prime-empl">
    <div class="card" >
        <div class="card-header corp-block-header">
            #{employeeMsg['employee.table.title']} - agGrid
        </div>
        <div class="card-block" style="padding: 0">
            <div class="pt-2">
                <div id="myGrid" style="height: 320px;" class="ag-theme-bootstrap"></div>
            </div>
        </div>
        <div class="card-footer">
            <h:form id="create_employee_form" rendered="#{empty editEmployeeController.model}">
                <h:commandLink id="create_button" styleClass="btn btn-primary" >
                    <i class="fa fa-user-plus"
                       aria-hidden="true"/>&#xA0; #{employeeMsg['employee.table.col.create']}
                    <f:ajax listener="#{editEmployeeController.createNewEmployee()}" render="editor"/>
                </h:commandLink>
            </h:form>
        </div>
    </div>


    <h:outputScript>

        $(document).ready(function () {

        // specify the columns
            var columnDefs = [
                {
                    headerName: "#{employeeMsg['employee.table.col.firstName']}",
                    field: "firstName",
                    filterParams: {newRowsAction: 'keep'},
                    checkboxSelection: function(params) {
                    // we put checkbox on the name if we are not doing grouping
                    return params.columnApi.getRowGroupColumns().length === 0;
                    },
                    headerCheckboxSelection: function(params) {
                    // we put checkbox on the name if we are not doing grouping
                    return params.columnApi.getRowGroupColumns().length === 0;
                    }
                },
                {headerName: "#{employeeMsg['employee.table.col.lastName']}", field: "lastName", filter: "agTextColumnFilter",
        filterParams: {
        cellHeight: 20,
        newRowsAction: 'keep'
        }},
                {headerName: "#{employeeMsg['employee.table.col.salary']}", field: "salary"},
                {headerName: "#{employeeMsg['employee.table.col.birthDate']}", field: "birthDate", filter: "agDateColumnFilter"}
            ];

            var autoGroupColumnDef = {
            headerName: 'Group',
            width: 200,
            field: 'firstName',
            valueGetter: function(params) {
            if (params.node.group) {
            return params.node.key;
            } else {
            return params.data[params.colDef.field];
            }
            },
            headerCheckboxSelection: true,
            // headerCheckboxSelectionFilteredOnly: true,
            cellRenderer:'agGroupCellRenderer',
            cellRendererParams: {
            checkbox: true
            }
            };
            // let the grid know which columns and what data to use
            var gridOptions = {
            columnDefs: columnDefs,
            enableSorting: true,
            enableFilter: true,
            enableColResize: true,
            pagination: true,
            paginationPageSize: 10,
            paginationAutoPageSize: false,
            autoGroupColumnDef: autoGroupColumnDef,
            //floatingFilter: true
            };

            // lookup the container we want the Grid to use
            var eGridDiv = document.querySelector('#myGrid');

            // create the grid passing in the div to use together with the columns data we want to use
            new agGrid.Grid(eGridDiv, gridOptions);

            xhrGet('http://localhost:8080/webapp/rest/EmployeeService/employee/viewitems').then(function(data) {
            gridOptions.api.setRowData(data);
            })
        })
    </h:outputScript>
</ui:composition>