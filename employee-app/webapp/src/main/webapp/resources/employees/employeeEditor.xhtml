<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:jsf="http://xmlns.jcp.org/jsf"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:composite="http://xmlns.jcp.org/jsf/composite"
      xmlns:employees="http://xmlns.jcp.org/jsf/composite/employees"
      xmlns:behavior="http://it2go.com/employee"
>

<composite:interface componentType="employee.component">
    <composite:attribute name="model" type="com.it2go.employee.entities.Employee" required="true"/>
    <composite:actionSource name="save" targets="#{cc.clientId}:employeeForm:save"/>
    <composite:clientBehavior name="cancel" event="click" targets="#{cc.clientId}:employeeForm:cancel"/>
    <composite:actionSource name="delete" targets="#{cc.clientId}:employeeForm:delete"/>
    <composite:attribute name="deleteConfirmFunc" />
</composite:interface>
<composite:implementation>

<div id="#{cc.clientId}">
<div class="card" >
    <div class="card-header corp-block-form-header">
        #{cc.resourceBundleMap['employee.editor.title']}
    </div>
    <div class="card-block">
        <h:form id="employeeForm" styleClass="form-horizontal" class="employeeForm">
        <div class="form-row">

            <div class="form-group row " jsf:id="firstNameRow">
                <label class="col-form-label col-md-3" for="firstName">#{cc.resourceBundleMap['employee.editor.firstName']}</label>
                <div class="col">
                    <input type="text" class="form-control" jsf:id="firstName" jsf:required="true"
                           jsf:value="#{cc.attrs.model.firstName}" data-valid="#{component.valid}">
                        <f:validateLength minimum="3" maximum="50"/>
                        <f:ajax execute="@this" render="@this" onevent="handleAjax" event="keyup"/>

                    </input>
                    <h:message for="firstName" errorClass="form-control-feedback" />
                </div>
            </div>
            <h:outputScript>
                function encodeId(id) {
                    return id.replace(new RegExp(':', 'g'), "\\:").toString();
                }

                function validateInputStyle(component){

                    var valid = component.attr("data-valid");
                    console.info("validateInputStyle component", component, " valid: " + valid);

                    component.parent().removeClass('has-danger has-success');
                    component.removeClass("form-control-danger form-control-success")
                    if (valid == "false") {
                        component.parent().addClass('has-danger');
                        component.addClass('form-control-danger');
                    }
                    else {
                        component.parent().addClass('has-success');
                        component.addClass('form-control-success');
                    }
                }

                function validateForm(form){
                    //var allInputFields = form.filter('input[type=text], select');
                    form.find("input[type=text], select").each(function(){validateInputStyle($(this))});
                }


                function handleAjax(data) {
                    var status = data.status;
                    var compenentId = data.source.id.replace(new RegExp(':', 'g'), "\\:");
                    var c1 = $("#j_idt23\\:employeeForm\\:firstName");
                    var id = "j_idt23\\:employeeForm\\:firstName";
                    var c111 = $("#" + id);
                    var encodedId = encodeId(data.source.id);
                    var c21 = $("#" + encodedId);


                    var input = $("#" + compenentId);
                    switch (status) {
                        case "begin":
                            // This is the start of the AJAX request.
                            //document.getElementsByTagName('body')[0].className = 'loading';
                            console.info("handleAjaxCall begin");
                            break;

                        case "complete":
                            // This is invoked right after AJAX response is returned.
                            break;

                        case "success":
                            // This is invoked right after successful processing of AJAX response and update of HTML DOM.
                            //document.getElementsByTagName('body')[0].className = '';
                            console.info("ComponentId: " + data.source.id);
                            console.info("Component valid: " + $("#j_idt23\\:employeeForm\\:firstName").attr("data-valid"));
                            console.info("checkInputStyle success valid:" + data.source.getAttribute("data-valid"), data.source);
                            var valid = $("#" + compenentId).attr("data-valid");
                            console.info("checkInputStyle success jquery valid: " + valid);

                            validateInputStyle(input);

                    break;
                }
                }

                function checkValidation(data){
                    var status = data.status;
                    var encodedId = encodeId(data.source.id);
                    var form = $("#" + encodedId).closest("form");;
                    switch (status) {
                        case "begin":
                            // This is the start of the AJAX request.
                            //document.getElementsByTagName('body')[0].className = 'loading';
                            console.info("checkValidation begin");
                            break;

                        case "complete":
                            // This is invoked right after AJAX response is returned.
                            break;

                        case "success":
                            // This is invoked right after successful processing of AJAX response and update of HTML DOM.
                            //document.getElementsByTagName('body')[0].className = '';

                              validateForm(form);

                            break;
                    }
                }
            </h:outputScript>
            <div class="form-group row">
                <label class="col-md-3 col-form-label" for="lastName">#{cc.resourceBundleMap['employee.editor.lastName']}</label>
                <div class="col">
                    <input type="text" class="form-control" jsf:id="lastName" jsf:required="true"
                           jsf:value="#{cc.attrs.model.lastName}" data-valid="#{component.valid}">
                        <f:validateLength minimum="3" maximum="50"/>
                        <f:ajax execute="@this" render="@this" onevent="handleAjax"/>
                    </input>
                    <h:message for="lastName" errorClass="form-control-feedback"/>
                </div>
            </div>
            <div class="form-group row  #{component.findComponent('birthDate').valid ? '':'has-danger'}">
                <label class="col-md-3 col-form-label" for="birthDate">#{cc.resourceBundleMap['employee.editor.birthDate']}</label>
                <div class="col">
                    <div class="input-group date" data-provide="datepicker" data-date-autoClose="true"  >
                        <input type="text" class="form-control #{component.valid ? '':'form-control-danger'}" jsf:id="birthDate" jsf:value="#{cc.attrs.model.birthDate}">
                            <f:convertDateTime pattern="#{cc.resourceBundleMap['employee.app.date.pattern']}"/>
                        </input>
                        <div class="input-group-addon">
                            <i class="fa fa-calendar" aria-hidden="true"/>
                        </div>
                    </div>
                    <h:message for="birthDate" errorClass="form-control-feedback" />
                </div>
            </div>
            <employees:emailList emailList="#{cc.attrs.model.emails}">

            </employees:emailList>

            <div class="form-group row  #{component.findComponent('slary').valid ? 'has-danger' : ''}">
                <label class="col-md-3 col-form-label" for="salary">#{cc.resourceBundleMap['employee.editor.salary']}</label>
                <div class="col">
                    <input type="text" class="form-control  #{component.valid ? '':'form-control-danger'}" jsf:id="salary"
                           jsf:value="#{cc.attrs.model.salary}">
                        <f:convertNumber currencySymbol="EUR" minFractionDigits="2" type="currency"/>
                    </input>
                    <h:message errorClass="form-control-feedback" id="errors1" for="salary"/>
                </div>
            </div>

            <div class="form-group row justify-content-end hidden-sm-down">
                <div class="btn-group">
                    <button type="submit" class="btn btn-primary mr-2" jsf:immediate="true" jsf:id="cancel">
                        #{cc.resourceBundleMap['employee.editor.button.cancel']}</button>

                    <button type="submit" class="btn btn-primary mr-2" jsf:rendered="#{cc.attrs.model.isNew() == false}"
                            jsf:id="delete">
                        <!--First ask for confirmation -->
                        <behavior:confirm modalSelector="#myModal" message="Möchten Sie den Datensatz wirklich löschen?"
                                          ajax="true" successJsFunction="#{cc.attrs.deleteConfirmFunc}"/>
                        <i class="fa fa-trash-o" aria-hidden="true"/> #{cc.resourceBundleMap['employee.editor.button.delete']}
                    </button>

                    <button type="submit" class="btn btn-primary mr-3" jsf:id="save">
                        #{cc.resourceBundleMap['employee.editor.button.save']}
                        <f:ajax execute="@form" render="@form" onevent="checkValidation"/>
                    </button>
                </div>
            </div>
            <ui:remove>
            <div class="form-group row hidden-md-up">
                <div class="col-sm-12">
                    <button type="submit" class="btn btn-primary btn-block" jsf:immediate="true" jsf:id="cancel">
                        #{cc.resourceBundleMap['employee.editor.button.cancel']}
                    </button>
                </div>
                <div class="col-sm-12">
                    <button type="submit" class="btn btn-primary  btn-block" jsf:id="delete">
                        #{cc.resourceBundleMap['employee.editor.button.delete']}
                    </button>
                </div>
                <div class="col-sm-12">
                    <button type="submit" class="btn btn-primary  btn-block" jsf:id="save">
                        #{cc.resourceBundleMap['employee.editor.button.save']}
                    </button>
                </div>
            </div>
            </ui:remove>
        </div>
    </h:form>
    </div>
</div>
</div>
    <div class="modal fade" id="myModal">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Löschen</h5>
                </div>
                <div class="modal-body">
                    <p class="modal-message">Möchten Sie den Datensatz wirklich löschen?</p>
                </div>
                <div class="modal-footer">
                    <button id="modal-ok" type="button" class="btn btn-primary" >Löschen</button>
                    <button id="modal-cancel" type="button" class="btn btn-secondary" data-dismiss="modal">Abbrechen</button>
                </div>
            </div>
        </div>
    </div>
    <h:outputScript >
        function test(){
           // alert("Alert from test");
            $('.employeeForm').submit();
        }

    </h:outputScript>
</composite:implementation>
</html>