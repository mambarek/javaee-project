<ui:composition
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
      xmlns:f="http://xmlns.jcp.org/jsf/core"
      xmlns:pt="http://xmlns.jcp.org/jsf/passthrough"
      xmlns:composite="http://xmlns.jcp.org/jsf/composite"
      xmlns:jsf="http://xmlns.jcp.org/jsf"
      xmlns:pe="http://xmlns.jcp.org/jsf/composite/prime-empl"
      xmlns:p="http://primefaces.org/ui">

<composite:interface componentType="uiCompositeComponent">
    <composite:attribute name="model" type="com.it2go.employee.entities.Employee" required="true"/>

    <composite:actionSource name="saveButton" event="click" targets="#{cc.clientId}:employeeForm:save"/>
    <composite:clientBehavior name="save" event="click" targets="#{cc.clientId}:employeeForm:save"/>

    <composite:clientBehavior name="saveConfirmed" event="click" targets="#{cc.clientId}:confirmHiddenForm:saveConfirmed"/>
    <composite:actionSource name="saveConfirmedBtn" event="click" targets="saveConfirmed" />

    <composite:actionSource name="delete" targets="#{cc.clientId}:employeeForm:delete"/>
    <composite:clientBehavior name="deleteConfirmed" event="click" targets="#{cc.clientId}:confirmHiddenForm:deleteConfirmed"/>
    <composite:actionSource name="deleteConfirmedBtn" event="click" targets="deleteConfirmed" />

    <composite:clientBehavior name="cancel" event="click" targets="#{cc.clientId}:employeeForm:cancel"/>

    <composite:attribute name="saveConfirmFunc" />
    <composite:attribute name="deleteConfirmFunc" />
    <composite:attribute name="renderAfterSave"/>
    <composite:attribute name="renderAfterDelete"/>
</composite:interface>
<composite:implementation>

<div id="#{cc.clientId}">
<div class="card" >
    <div class="card-header corp-block-form-header">
        #{cc.resourceBundleMap['employee.editor.title']}
    </div>
    <div class="card-block">
        <h:form id="employeeForm" styleClass="employeeForm" >

            <pe:formRow value="#{cc.attrs.model.firstName}"
                               label="#{cc.resourceBundleMap['employee.editor.firstName']}"
                               isRequired="true" >
                <f:validateLength minimum="3" maximum="50"/>
            </pe:formRow>

            <pe:formRow value="#{cc.attrs.model.lastName}"
                               label="#{cc.resourceBundleMap['employee.editor.lastName']}"
                               isRequired="true" ajaxValidation="true">
                <f:validateLength minimum="3" maximum="50"/>
            </pe:formRow>

            <pe:formRow value="#{cc.attrs.model.birthDate}"
                               label="#{cc.resourceBundleMap['employee.editor.birthDate']}"
                               inputType="date"
                               placeholder="#{cc.resourceBundleMap['employee.app.date.pattern']}">
                <f:convertDateTime pattern="#{cc.resourceBundleMap['employee.app.date.pattern']}"/>
            </pe:formRow>
            <pe:formRow value="#{cc.attrs.model.salary}"
                        label="#{cc.resourceBundleMap['employee.editor.salary']}">
                <f:convertNumber currencySymbol="EUR" minFractionDigits="2" type="currency"/>
            </pe:formRow>
            <pe:formRow value="#{cc.attrs.model.gender}" inputType="custom-radio" label="#{cc.resourceBundleMap['employee.editor.gender']}"
                               radioItems="#{masterdataService.genders}" isRequired="true">
            </pe:formRow>

<!--
            <pe:formRow inputType="prime-pselect" value="#{cc.attrs.model.gender}" label="Prime-#{cc.resourceBundleMap['employee.editor.gender']}"
                        radioItems="#{masterdataService.genders}" isRequired="true"/>

            <pe:formRow value="#{cc.attrs.model.gender}" inputType="newselect" label="#{cc.resourceBundleMap['employee.editor.gender']}"
                        radioItems="#{masterdataService.genders}" isRequired="false">
                <f:facet name="selectOnMenuTemplate">
                    &lt;!&ndash;<div style="color:darkgreen">&ndash;&gt;
                    <i class="fas fa-#{item.name.toLowerCase()}"/>&#160;  #{masterdataService.getLocalizedNameFor(item)} &#160;&#160;<span style="font-weight:bold;color:darkgreen ">Noch was</span>
                    &lt;!&ndash;</div>&ndash;&gt;
                </f:facet>
            </pe:formRow>
-->
<!--            <pe:formRow value="" inputType="newselect" label="Region"
                        radioItems="#{masterdataService.continents}" >
                <f:facet name="selectOnMenuTemplate">
                    <span>#{masterdataService.getLocalizedNameFor(item)}</span>
                </f:facet>
            </pe:formRow>-->
            <pe:countrySelect value="#{testController.countryCode}" label="Test continent" isRequired="true" decorated="true"/>
            <!--<pe:countryComboBox value="#{testController.countryCode}" label="Test continent" isRequired="false"/>-->

            <div class="form-group row">
            <h:outputLabel styleClass="col-sm-3 col-form-label" value="Test"/>
            <div class="col-sm-9">
                <div jsf:id="inputContainer" class="inputContainer">
                    <div class="input-group">
                        <h:selectOneMenu id="editableText" styleClass="form-control"
                                         style="width: 100%" >
                            <f:selectItem
                                    itemLabel="--Bitte wähl doch --" itemValue="" noSelectionOption="true"/>
                            <f:selectItems value="#{masterdataService.getAllCountries(facesContext.viewRoot.locale)}" var="item"
                                           itemLabel="#{item.name}" itemValue="#{item.code}" />
                            <!--<f:ajax execute="@this" event="change" render="#{cc.clientId}" />-->
                        </h:selectOneMenu>
                        <!-- draw table with cols-->
                        <div style="display: none">
                            <ul>
                                <li id="#{cc.clientId}-country-li-0">-- Bitte wählen --</li>
                                <ui:repeat value="#{masterdataService.getAllCountries(facesContext.viewRoot.locale)}" var="item" varStatus="status">
                                    <li id="#{cc.clientId}-country-li-#{status.index + 1}">
                                        <img src="../../assets/images/flags/icons/png/#{item.code.toLowerCase()}.png" alt=" "/>&#160;  #{item.name}
                                    </li>
                                </ui:repeat>
                            </ul>
                        </div>
                    </div>
                    <h:outputScript>
                        $( function() {
                        $.widget( "custom.combobox", {
                        _create: function() {
                        this.wrapper = $( "&lt;div&gt;" )
                        .addClass( "custom-combobox" )
                        .insertAfter( this.element );

                        this.element.hide();
                        this._createAutocomplete();
                        //this._createDisplay();
                        this._createShowAllButton();

                        },

                        _createDisplay: function(){
                            var _this = this;
                            this.display = $("&lt;span&gt;").hide();
                            this.display.appendTo( this.wrapper )
                            .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
                        .autocomplete({
                        delay: 0,
                        minLength: 0,
                        source: $.proxy( this, "_source" )

                        });
                            this.display.on("click",function(){
                                _this.display.hide();
                                _this.input.show();
                                _this.input.focus();
                            })
                        },

                        _createAutocomplete: function() {
                        var selected = this.element.children( ":selected" ),
                        value = selected.val() ? selected.text() : "";

                        this.input = $( "&lt;input&gt;" )
                        .appendTo( this.wrapper )
                        .val( value )
                        .attr( "title", "" )
                        .addClass( "custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left" )
                        .autocomplete({
                        delay: 0,
                        minLength: 0,
                        source: $.proxy( this, "_source" ),
                        // bei collision at the bottom of browser show menu on the oposite (top)
                        position:{collision: "flip"}

                        });

                        this.input.data("uiAutocomplete")._renderItem = function( ul, item ) {
                        var _id = '#' + encodeId("#{cc.clientId}-country-li-" + item.option.index);
                        //console.info("#+#+ _d: " + _id, item);
                        var _li = $(_id);

                        var li = $("&lt;li/&gt;");
                        var div = $("&lt;div&gt;");
                        li.append(div);
                        div.html(_li.html());
                        return li.appendTo( ul );
                        }

                        this._on( this.input, {
                        autocompleteselect: function( event, ui ) {
                        ui.item.option.selected = true;
                        this._trigger( "select", event, {
                        item: ui.item.option
                        });

                        var _id = '#' + encodeId("#{cc.clientId}-country-li-" + ui.item.option.index);
                        //console.info("#+#+ _d: " + _id, item);
                        var _li = $(_id);

                        /*this.display.html(_li.html());
                        this.display.show();
                        this.input.hide();*/

                        },

                        autocompletechange: "_removeIfInvalid"
                        });
                        },

                        _createShowAllButton: function() {
                        var input = this.input,
                        wasOpen = false;

                        $( "&lt;a&gt;" )
                        .attr( "tabIndex", -1 )
                        .attr( "title", "Show All Items" )
                        .tooltip()
                        .appendTo( this.wrapper )
                        .button({
                        icons: {
                        primary: "ui-icon-triangle-1-s"
                        },
                        text: false
                        })
                        .removeClass( "ui-corner-all" )
                        .addClass( "ui-corner-right ui-button-icon ui-combobox-button custom-combobox-button" )
                        .on( "mousedown", function() {
                        wasOpen = input.autocomplete( "widget" ).is( ":visible" );
                        })
                        .on( "click", function() {
                        input.trigger( "focus" );

                        // Close if already visible
                        if ( wasOpen ) {
                        return;
                        }

                        // Pass empty string as value to search for, displaying all results
                        input.autocomplete( "search", "" );
                        });
                        },



                        _source: function( request, response ) {
                        var matcher = new RegExp( $.ui.autocomplete.escapeRegex(request.term), "i" );
                        response( this.element.children( "option" ).map(function() {
                        var text = $( this ).text();
                        if ( this.value &#38;&#38; ( !request.term || matcher.test(text) ) )
                        return {
                        label: text,
                        value: text,
                        option: this
                        };
                        }) );
                        },

                        _removeIfInvalid: function( event, ui ) {

                        // Selected an item, nothing to do
                        if ( ui.item ) {
                        return;
                        }

                        // Search for a match (case-insensitive)
                        var value = this.input.val(),
                        valueLowerCase = value.toLowerCase(),
                        valid = false;
                        this.element.children( "option" ).each(function() {
                        if ( $( this ).text().toLowerCase() === valueLowerCase ) {
                        this.selected = valid = true;
                        return false;
                        }
                        });

                        // Found a match, nothing to do
                        if ( valid ) {
                        return;
                        }

                        // Remove invalid value
                        this.input
                        .val( "" )
                        .attr( "title", value + " didn't match any item" )
                        .tooltip( "open" );
                        this.element.val( "" );
                        this._delay(function() {
                        this.input.tooltip( "close" ).attr( "title", "" );
                        }, 2500 );
                        this.input.autocomplete( "instance" ).term = "";
                        },

                        _destroy: function() {
                        this.wrapper.remove();
                        this.element.show();
                        }});

                        $( "#" + encodeId("editor:employeeForm:editableText" )).combobox({

                        });

                        } );
                    </h:outputScript>
                </div>
            </div>
            </div>
            <div class="form-group row">
                <h:outputLabel styleClass="col-sm-3 col-form-label" value="Combobox"/>
                <div class="col-sm-9">
                    <pe:comboBoxComponent value="" items="#{masterdataService.getAllCountries(facesContext.viewRoot.locale)}" />
                </div>
            </div>

            <!--<pe:selectComponent value="#{testController.continent}" items="#{masterdataService.continents}" >
                <f:facet name="selectOnMenuTemplate">
                    <span>#{masterdataService.getLocalizedNameFor(item)}</span>
                </f:facet>
            </pe:selectComponent>-->
<!--            <pe:selectComponent value="#{testController.continent}" items="#{masterdataService.continents}"
                                ajaxRender="editor:employeeForm:country">
                <f:facet name="selectOnMenuTemplate">
                    <span>#{masterdataService.getLocalizedNameFor(item)}</span>
                </f:facet>
            </pe:selectComponent>
            <h:outputText id="country" value="Der Kontinent: #{testController.continent}"/>-->
<!--
            <div jsf:id="country">
            <pe:selectComponent value="#{testController.country}" items="#{testController.continent.getCountries(facesContext.viewRoot.locale)}"
                                >
                <f:facet name="selectOnMenuTemplate">
                    <span>#{item.name}</span>
                </f:facet>
            </pe:selectComponent>
            </div>-->

            <div class="form-group row justify-content-end">
                <div class="btn-group">
                    <h:commandLink type="submit" styleClass="btn btn-primary mr-2 btn-sm-block" immediate="true" id="cancel">
                        <i class="fas fa-undo" aria-hidden="true"/>&#xA0; #{cc.resourceBundleMap['employee.editor.button.cancel']}
                    </h:commandLink>

                    <h:commandLink styleClass="btn btn-primary mr-2 btn-sm-block" rendered="#{cc.attrs.model.isNew() == false}"
                                   id="delete" pt:data-deleteFunc="clickDelete">
                        <i class="far fa-trash-alt" aria-hidden="true"/>&#xA0; #{cc.resourceBundleMap['employee.editor.button.delete']}
                        <f:ajax execute="@form" render="#{cc.attrs.renderAfterDelete}" onevent="confirmDelete"/>
                    </h:commandLink>
                    <h:commandLink styleClass="btn btn-primary mr-3 btn-sm-block" pt:data-saveFunc="clickSave">
                        <i class="far fa-save" aria-hidden="true"/>&#xA0; #{cc.resourceBundleMap['employee.editor.button.save']}
                        <f:ajax execute="@form" render="#{cc.attrs.renderAfterSave}" onevent="checkValidationAndConfirmSave"/>
                    </h:commandLink>
                </div>
            </div>


    </h:form>

     <div class="employeeFormErrorList" style="display: none">
        <ui:repeat value="#{facesContext.messageList}" var="facesMessage">
            <ui:fragment rendered="#{facesMessage.severity eq 'ERROR'}">
                <div class="alert alert-danger alert-dismissable">
                    <a href="#" class="close" data-dismiss="alert" aria-label="close">&#x00D7;</a>
                    <strong>#{cc.resourceBundleMap['employee.messgaes.error']} </strong> #{facesMessage.summary}
                </div>
            </ui:fragment>
        </ui:repeat>
     </div>
        <!-- hidden form for confirmation dialog action delete-->
        <h:form id="confirmHiddenForm">
            <h:commandButton id="deleteConfirmed" style="display: none;" styleClass="deleteConfirmed">
                <f:ajax execute="@this"  render="content"/>
            </h:commandButton>
            <h:commandButton id="saveConfirmed" style="display: none;" styleClass="saveConfirmed">
                <f:ajax execute="@this"  render="content"/>
            </h:commandButton>
        </h:form>
    </div>
</div>
</div>

</composite:implementation>

</ui:composition>